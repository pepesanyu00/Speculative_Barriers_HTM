#include <iostream>
#include <cmath>
#include <fstream>
#include <iomanip>
#include <limits>
#include <vector>
#include <string>
#include <sstream>
#include <chrono>
#include <assert.h>
#include <omp.h>
#include <unistd.h> //For getpid(), used to get the pid to generate a unique filename
#include <typeinfo> //To obtain type name as string
#include <array>
#include <assert.h> //RIC incluyo assert para hacer comprobaciones de invariantes y condiciones
//#include <smmintrin.h>
#include <immintrin.h>

#define PATH_RESULTS "./results/" /* RIC Quito SCAMP_ para hacer que se imprima el nombre del programa llamado como nombre del fichero de salida*/
#define DTYPE double              /* DATA TYPE */
#define ITYPE long long int       /* INDEX TYPE: RIC pongo long long int para que tanto el double como el int sean de 64 bits (facilita la vectorización) */
#define ALIGN 32                  // RIC 32 bytes para AVX2
#define VPACK 4                   // Cuatro doubles empaquetados en un registro AVX2

//RIC Me defino unas macros para reservar memoria alineada
// Uso el operador ## para concatenar algo al nombre de la variable.
// Así creo dos variables al reservar memoria: la que se usará (alineada) y otra para que utilizaré al final para liberar memoria
#define ALIGNED_ARRAY_NEW(_type, _var, _elem, _align)                                                                    \
  assert(_align >= sizeof(_type) && _elem >= 1); /* Compruebo condiciones */                                             \
                                                 /* Reservo más elementos que elem: align(en bytes)/numbytes de type */  \
  _type *_var##__unaligned = new _type[_elem + _align / sizeof(_type)](); /* Con () inicializamos a 0*/                  \
  assert(_var##__unaligned != NULL && _var##__unaligned[0] == 0 && _var##__unaligned[1] == 0);                           \
  /* Hago un casting del puntero con uintptr_t. De esta manera el operador + lo tomará como un número y operará en */    \
  /* aritmética entera. Si no hiciera el casting, el compilador aplica aritmética de punteros */                         \
  /* Luego hago una máscara con todo unos menos log2(align) ceros y dejo los lsb a 0 */                                  \
  _var = (_type *)(((uintptr_t) _var##__unaligned + _align - 1) & ~(uintptr_t)(_align - 1));                             \
  assert(((uintptr_t)_var & (uintptr_t)(_align - 1)) == 0); /* Compruebo que var esté alineado */                        \
  /* cout << #_var << "__unaligned: " << hex << _var##__unaligned << "(" << dec << (uintptr_t) _var##__unaligned << ") -> " << #_var << ": " << hex << _var << "(" << dec << (uintptr_t) _var << ")" << endl; */

#define ALIGNED_ARRAY_DEL(_var)      \
  assert(_var##__unaligned != NULL); \
  delete[] _var##__unaligned;

using namespace std;

/* ------------------------------------------------------------------ */

ITYPE numThreads, exclusionZone, windowSize, tSeriesLength, profileLength;
ITYPE debug = 1;

/* struct alignedData
{
  alignas(32) DTYPE data;
}; */

// Computes all required statistics for SCAMP, populating info with these values
void preprocess(DTYPE *tSeries, DTYPE *means, DTYPE *norms, DTYPE *df, DTYPE *dg, ITYPE tSeriesLength)
{

  vector<DTYPE> prefix_sum(tSeriesLength);
  vector<DTYPE> prefix_sum_sq(tSeriesLength);

  // Calculates prefix sum and square sum vectors
  prefix_sum[0] = tSeries[0];
  prefix_sum_sq[0] = tSeries[0] * tSeries[0];
  for (ITYPE i = 1; i < tSeriesLength; ++i)
  {
    prefix_sum[i] = tSeries[i] + prefix_sum[i - 1];
    prefix_sum_sq[i] = tSeries[i] * tSeries[i] + prefix_sum_sq[i - 1];
  }

  // Prefix sum value is used to calculate mean value of a given window, taking last value
  // of the window minus the first one and dividing by window size
  means[0] = prefix_sum[windowSize - 1] / static_cast<DTYPE>(windowSize);
  for (ITYPE i = 1; i < profileLength; ++i)
    means[i] = (prefix_sum[i + windowSize - 1] - prefix_sum[i - 1]) / static_cast<DTYPE>(windowSize);

  DTYPE sum = 0;
  for (ITYPE i = 0; i < windowSize; ++i)
  {
    DTYPE val = tSeries[i] - means[0];
    sum += val * val;
  }
  norms[0] = sum;

  // Calculates L2-norms (euclidean norm, euclidean distance)
  for (ITYPE i = 1; i < profileLength; ++i)
    norms[i] = norms[i - 1] + ((tSeries[i - 1] - means[i - 1]) + (tSeries[i + windowSize - 1] - means[i])) *
                                  (tSeries[i + windowSize - 1] - tSeries[i - 1]);
  for (ITYPE i = 0; i < profileLength; ++i)
    norms[i] = 1.0 / sqrt(norms[i]);

  // Calculates df and dg vectors
  for (ITYPE i = 0; i < profileLength - 1; ++i)
  {
    df[i] = (tSeries[i + windowSize] - tSeries[i]) / 2.0;
    dg[i] = (tSeries[i + windowSize] - means[i + 1]) + (tSeries[i] - means[i]);
  }
}

void scamp(DTYPE *tSeries, DTYPE *means, DTYPE *norms, DTYPE *df, DTYPE *dg, DTYPE *profile, ITYPE *profileIndex)
{
  // Private structures
  // RIC las pongo alineadas tb
  //vector<DTYPE> profile_tmp(profileLength * numThreads);
  //vector<ITYPE> profileIndex_tmp(profileLength * numThreads);
  DTYPE *profile_tmp = NULL;
  ITYPE *profileIndex_tmp = NULL;
  //RIC sumo VPACK al profileLength
  ALIGNED_ARRAY_NEW(DTYPE, profile_tmp, (profileLength + VPACK) * numThreads, ALIGN);
  ALIGNED_ARRAY_NEW(ITYPE, profileIndex_tmp, (profileLength + VPACK) * numThreads, ALIGN);

#pragma omp parallel
  {
    // ITYPE 
    ITYPE my_offset = omp_get_thread_num() * (profileLength + VPACK);
    //DTYPE covariance, correlation;
    //__m256d val_d = _mm256_set1_pd(means[0]);

    // Private profile initialization
    for (ITYPE i = my_offset; i < (my_offset + profileLength); i++)
      profile_tmp[i] = -numeric_limits<DTYPE>::infinity();

// pasa algo con la forma en la que se coge las diagonales, cada thread debe coger
// cuatro y no menos, no tiene sentido que el thread siguiente coga la siguiente dia-
// gonal, si no que cada uno coja cuatro (o las que sean)

// Go through diagonalsz
#pragma omp for schedule(dynamic)
    for (ITYPE diag = exclusionZone + 1; diag < profileLength; diag += VPACK)
    // cada thread coge cuatro diagonales y las compara con cuatro valores
    /* RIC al haber puesto el +4 (lo he cambiado por VPACK, así será más fácil pasarlo a AVX512,
       sólo cambiando el define) en este bucle, que es lo que te sugerí, los bucles de dentro no
       deberían llevar +4. Vamos empaquetando en registros AVX los elementos de los vectores afectados
       por el contador diag       
    */
    {
      //alignas(32) DTYPE aux[4]; // change if avx 512
      //covariance = 0; RIC tengo que crear una variable AVX para la covarianza
      __m256d covariance_v = _mm256_setzero_pd(); // 4 covarianzas empaquetadas
      /* RIC dejo este bucle sin poner i+=4.
         En este bucle se realiza el producto vectorial de cada elemento de las ventanas
         que están en las posiciones diag y 0 (centrado en la media, de ahí el - mean()
         En nuestro caso, realizaremos el producto vectorial de la [diag, diag+1, diag+2, diag+3]
         por la 0, en paralelo, vectorizando.
      */
      for (ITYPE i = 0; i < windowSize; i++)
      {
        // covariance += ((tSeries[diag + i] - means[diag]) * (tSeries[i] - means[0]));
        //assert(((uintptr_t)&tSeries[diag + i] & (uintptr_t)(ALIGN - 1)) == 0);
        __m256d tSeriesWinDiag_v = _mm256_loadu_pd(&tSeries[diag + i]); // Los afectados por diag se cargan de 4 en 4
        __m256d meansWinDiag_v = _mm256_loadu_pd(&means[diag]);
        __m256d tSeriesWin0_v = _mm256_set1_pd(tSeries[i]); // Los no afectados se replican
        __m256d meansWin0_v = _mm256_set1_pd(means[0]);
        // res = fma(a,b,c) -> res = a*b+c
        covariance_v = _mm256_fmadd_pd(_mm256_sub_pd(tSeriesWinDiag_v, meansWinDiag_v), _mm256_sub_pd(tSeriesWin0_v, meansWin0_v), covariance_v);
      }

      /*__m256d val_a, val_b, v_covariance, val_c;
      val_c = _mm256_set1_pd(means[diag]);
      if (debug)
        cout << "\nSuccesfully loaded means[" << diag << "] by thread " << omp_get_thread_num();
      val_d = _mm256_set1_pd(means[0]);
      for (ITYPE i = 0; i < windowSize; i += 4) // change windowsize if avx 512
                                                // THIS NEEDS SOME WORK
      {
        val_a = _mm256_load_pd(&tSeries[diag + i]);
        if (debug)
          cout << "\nSuccesfully loaded means[" << (diag + i) << "] by thread " << omp_get_thread_num();
        // take limits into consideration
        val_b = _mm256_load_pd(&tSeries[i]);
        // In this line of code it is a shitshow though.
        if (debug)
          cout << "\nSuccesfully loaded tSeries[" << i << "]  by thread " << omp_get_thread_num();
        v_covariance = _mm256_mul_pd(_mm256_sub_pd(val_a, val_c), _mm256_sub_pd(val_b, val_d));

        _mm256_store_pd(&aux[0], v_covariance);
        for (int i = 0; i < 4; i++)
        {
          covariance += aux[i];
        }
        // covariance += ((tSeries[diag + i] - means[diag]) * (tSeries[i] - means[0]));
        // en la covarianza se suma, uno a uno, los valores
      } */

      ITYPE i = 0;
      ITYPE j = diag;
      // RIC La j es diag en realidad por lo que las normas j se cargan con load y las i con set1
      //correlation = covariance * norms[i] * norms[j];
      __m256d normsi_v = _mm256_set1_pd(norms[i]);
      __m256d normsj_v = _mm256_loadu_pd(&norms[j]);
      __m256d correlation_v = _mm256_mul_pd(_mm256_mul_pd(covariance_v, normsi_v), normsj_v);
      //double correlation = corr[0];
      //double covariance = 0;
      //RIC Este es el problema de encontrar el máximo horizontal
      /*if (correlation > profile_tmp[i + my_offset])
      {
        profile_tmp[i + my_offset] = correlation;
        profileIndex_tmp[i + my_offset] = j;
      }*/
      // RIC pruebo primero en serie. A realizar: vectorizar con el máximo horizontal y probar si los tiempos son mejores
      alignas(ALIGN) DTYPE correlation[VPACK];
      _mm256_store_pd(correlation, correlation_v);
      for (int ii = 0; ii < 4; ii++)
      {
        if (correlation[ii] > profile_tmp[i + my_offset])
        {
          profile_tmp[i + my_offset] = correlation[ii];
          profileIndex_tmp[i + my_offset] = j + ii;
        }
      }
      // Para j, cargo los 4 profiles
      /*if (correlation > profile_tmp[j + my_offset])
      {
        profile_tmp[j + my_offset] = correlation;
        profileIndex_tmp[j + my_offset] = i;
      }*/
      __m256d profilej_v = _mm256_loadu_pd(&profile_tmp[j + my_offset]);
      __m256i mask = (__m256i)_mm256_cmp_pd(correlation_v, profilej_v, _CMP_GT_OQ);
      _mm256_maskstore_pd(&profile_tmp[j + my_offset], mask, correlation_v);
      _mm256_maskstore_epi64(&profileIndex_tmp[j + my_offset], mask, _mm256_set1_epi64x(i));

      i = 1;
      for (ITYPE j = diag + 1; j < profileLength; j++)
      {
        // esto se puede paralelizar
        // empieza por i = 0, j = diag y continúa
        //covariance += (df[i - 1] * dg[j - 1] + df[j - 1] * dg[i - 1]); // paralelizable
        // RIC seguimos con que las js son diag y son las que se empaquetan, las ies se replican
        __m256d dfj_v = _mm256_loadu_pd(&df[j - 1]); // Los afectados por diag se cargan de 4 en 4
        __m256d dgj_v = _mm256_loadu_pd(&dg[j - 1]);
        __m256d dfi_v = _mm256_set1_pd(df[i - 1]); // Los no afectados se replican
        __m256d dgi_v = _mm256_set1_pd(dg[i - 1]);
        // res = fma(a,b,c) -> res = a*b+c
        covariance_v = _mm256_add_pd(covariance_v, _mm256_fmadd_pd(dfi_v, dgj_v, _mm256_mul_pd(dfj_v, dgi_v)));

        //correlation = covariance * norms[i] * norms[j];                // mas complicado
        //RIC como antes, lo que va afectado de i se replica y lo que va afectado de j se carga
        normsi_v = _mm256_set1_pd(norms[i]);
        normsj_v = _mm256_loadu_pd(&norms[j]);
        correlation_v = _mm256_mul_pd(_mm256_mul_pd(covariance_v, normsi_v), normsj_v);

        // guardar el resultado mayor de la paralelizacion en variables auxiliares
        // y actualizar
        /*if (correlation > profile_tmp[i + my_offset])
        {
          profile_tmp[i + my_offset] = correlation;
          profileIndex_tmp[i + my_offset] = j;
        }*/
        _mm256_store_pd(correlation, correlation_v);
        for (int ii = 0; ii < 4; ii++)
        {
          if (correlation[ii] > profile_tmp[i + my_offset])
          {
            profile_tmp[i + my_offset] = correlation[ii];
            profileIndex_tmp[i + my_offset] = j + ii;
          }
        }

        /*if (correlation > profile_tmp[j + my_offset])
        {
          profile_tmp[j + my_offset] = correlation;
          profileIndex_tmp[j + my_offset] = i;
        }*/
        profilej_v = _mm256_loadu_pd(&profile_tmp[j + my_offset]);
        mask = (__m256i)_mm256_cmp_pd(correlation_v, profilej_v, _CMP_GT_OQ);
        _mm256_maskstore_pd(&profile_tmp[j + my_offset], mask, correlation_v);
        _mm256_maskstore_epi64(&profileIndex_tmp[j + my_offset], mask, _mm256_set1_epi64x(i));

        i++;
      }

      /*
        Definitivamente no tiene sentido comparar con los elementos antes de diag, ya que la matriz
        va a ser siempre simétrica (la distancia del segmento a al b es la misma que la del b al a, en tér
        minos absolutos).
      */
    } //'pragma omp for' places here a barrier unless 'no wait' is specified

    //DTYPE max_corr;
    //ITYPE max_index = 0;
// Reduction. RIC Vectorizo el bucle externo (comum++ por colum+=VPACK)
#pragma omp for schedule(static)
    for (ITYPE colum = 0; colum < profileLength; colum+=VPACK)
    {
      // max_corr = -numeric_limits<DTYPE>::infinity();
      __m256d max_corr_v = _mm256_set1_pd(-numeric_limits<DTYPE>::infinity());
      __m256i max_indices_v;
      for (ITYPE th = 0; th < numThreads; th++)
      {
        // RIC Esta búsqueda del máximo sería como la segunda búsqueda del máximo del bucle anterior (la que va después de la que se hizo en serie)
        // Utilizo instrucciones del ejemplo max-v.cpp 
        /*if (profile_tmp[colum + (th * (profileLength + VPACK))] > max_corr)
        {
          max_corr = profile_tmp[colum + (th * (profileLength + VPACK))];
          max_index = profileIndex_tmp[colum + (th * (profileLength + VPACK))];
        }*/
        // RIC Como el profileLength puede tener cualquier valor no puedo hacer los load alineados
        __m256d profile_tmp_v = _mm256_loadu_pd(&profile_tmp[colum + (th * (profileLength + VPACK))]);
        __m256i profileIndex_tmp_v = _mm256_loadu_si256((__m256i *)&profileIndex_tmp[colum + (th * (profileLength + VPACK))]);
        __m256i mask = (__m256i)_mm256_cmp_pd(profile_tmp_v, max_corr_v, _CMP_GT_OQ);
        max_indices_v = _mm256_blendv_epi8(max_indices_v, profileIndex_tmp_v, mask);  // Update con máscara de los índices
        max_corr_v = _mm256_blendv_pd(max_corr_v,profile_tmp_v, (__m256d)mask);       // Update con máscara de las correlaciones
        // RIC valdría tb con _mm256_max_pd (creo que no hay diferencia en el tiempo de ejecución)
        //max_corr_v = _mm256_max_pd(profile_tmp_v, max_corr_v);                        // Update con max de las correlaciones
      }
      //profile[colum] = max_corr;
      //profileIndex[colum] = max_index;
      //Los stores sí pueden ser alineados
      _mm256_store_pd(&profile[colum], max_corr_v);
      _mm256_store_si256((__m256i *)&profileIndex[colum], max_indices_v);
    }
  }
  
  ALIGNED_ARRAY_DEL(profile_tmp);
  ALIGNED_ARRAY_DEL(profileIndex_tmp);
}

int main(int argc, char *argv[])
{
  try
  {
    // Creation of time meassure structures
    chrono::steady_clock::time_point tstart, tend;
    chrono::duration<double> telapsed;

    if (argc != 4)
    {
      cout << "[ERROR] usage: ./scamp input_file win_size num_threads" << endl;
      return 0;
    }

    windowSize = atoi(argv[2]);
    numThreads = atoi(argv[3]);
    // Set the exclusion zone to 0.25
    exclusionZone = (ITYPE)(windowSize * 0.25);
    omp_set_num_threads(numThreads);

    //vector<DTYPE> tSeriesV; Usamos arrays
    string inputfilename = argv[1];
    stringstream tmp;
    // RIC Ahora permito que la timeseries se introduzca con el directorio
    // RIC Quito el directorio de la cadena de resultados con rfind('/') y meto el nombre del programa al principio del nombre del fichero de resultados
    tmp << PATH_RESULTS << argv[0] << "_" << inputfilename.substr(inputfilename.rfind('/') + 1, inputfilename.size() - 4 - inputfilename.rfind('/') - 1) <<
                   "_w" << windowSize << "_t" << numThreads << "_" << getpid() << ".csv";
    string outfilename = tmp.str();

    // Display info through console
    cout << endl;
    cout << "############################################################" << endl;
    cout << "///////////////////////// SCAMP ////////////////////////////" << endl;
    cout << "############################################################" << endl;
    cout << endl;
    cout << "[>>] Reading File: " << inputfilename << "..." << endl;

    /* ------------------------------------------------------------------ */
    /* Count file lines */
    tstart = chrono::steady_clock::now();

    fstream tSeriesFile(inputfilename, ios_base::in);
    tSeriesLength = 0;
    cout << "[>>] Counting lines ... " << endl;
    string line;
    while (getline(tSeriesFile, line)) // Cuento el número de líneas
      tSeriesLength++;

    tend = chrono::steady_clock::now();
    telapsed = tend - tstart;
    cout << "[OK] Lines: " << tSeriesLength << " Time: " << telapsed.count() << "s." << endl;
    /* ------------------------------------------------------------------ */
    /* Read time series file */
    cout << "[>>] Reading values ... " << endl;
    tstart = chrono::steady_clock::now();
    DTYPE *tSeries = NULL; // Defino la serie temporal como un puntero a DTYPE
    // Le sumo a la longitud el VPACK para que cuando se trabaje en los límites de la serie se cojan elementos reservados (aunque luego no sirvan los cálculos que se hacen con ellos)
    ALIGNED_ARRAY_NEW(DTYPE, tSeries, tSeriesLength + VPACK, ALIGN);
    tSeriesFile.clear();                // Limpio el stream
    tSeriesFile.seekg(tSeriesFile.beg); // Y lo reinicio a beginning
    DTYPE tempval, tSeriesMin = numeric_limits<DTYPE>::infinity(), tSeriesMax = -numeric_limits<double>::infinity();
    //RIC comprobar si el fichero tiene algún NaN y quitarlo
    for (int i = 0; tSeriesFile >> tempval; i++)
    {
      tSeries[i] = tempval;
      if (tempval < tSeriesMin)
        tSeriesMin = tempval;
      if (tempval > tSeriesMax)
        tSeriesMax = tempval;
    }
    tSeriesFile.close();
    tend = chrono::steady_clock::now();
    telapsed = tend - tstart;
    cout << "[OK] Time: " << telapsed.count() << "s." << endl;

    //tSeries = new (std::align_val_t(32)) double[tSeriesLength];
    //RIC estás declarando la serie como array en pila. Cuando la serie sea de miles de millones no funcionará.
    // El tamaño de la pila no suele ser muy grande, aunque se puede cambiar.
    //alignas(32) DTYPE tSeries[tSeriesLength];
    /* for (size_t i = 0; i < tSeriesLength; i++)
    {
      tSeries[i] = 0.0 + tSeriesV[i];
    }*/

    // tend = chrono::steady_clock::now();
    // telapsed = tend - tstart;
    // cout << "[OK] Read File Time: " << setprecision(numeric_limits<double>::digits10 + 2) << telapsed.count() << " seconds." << endl;
    /* ------------------------------------------------------------------ */
    // Set Matrix Profile Length
    profileLength = tSeriesLength - windowSize + 1;

    // Auxiliary vectors and arrays
    // vector<DTYPE> norms(profileLength), means(profileLength), df(profileLength), dg(profileLength);
    // vector<DTYPE> profile(profileLength);
    //RIC Como decía cuando declaraste el vector tSeries como variable local, se alojaría en la pila, y no cabrían cuando tratemos series muy largas.
    //vector<ITYPE> profileIndex(profileLength);
    //alignas(32) DTYPE norms[profileLength], means[profileLength], df[profileLength], dg[profileLength];
    //alignas(32) DTYPE profile[profileLength];

    // RIC Defino los arrays con las macros creadas para que salgan alineados (aunque finalmente uso loadu, y probablemente no haga falta usarlas)
    // Sumo a la longitud VPACK para que en los límites se trabaje con memoria reservada aunque no se utilicen los datos
    DTYPE *norms = NULL, *means = NULL, *df = NULL, *dg = NULL, *profile = NULL;
    ITYPE *profileIndex = NULL;
    ALIGNED_ARRAY_NEW(DTYPE, norms, profileLength + VPACK, ALIGN);
    ALIGNED_ARRAY_NEW(DTYPE, means, profileLength + VPACK, ALIGN);
    ALIGNED_ARRAY_NEW(DTYPE, df, profileLength + VPACK, ALIGN);
    ALIGNED_ARRAY_NEW(DTYPE, dg, profileLength + VPACK, ALIGN);
    ALIGNED_ARRAY_NEW(DTYPE, profile, profileLength + VPACK, ALIGN);
    ALIGNED_ARRAY_NEW(ITYPE, profileIndex, profileLength + VPACK, ALIGN);

    // Display info through console
    cout << endl;
    cout << "------------------------------------------------------------" << endl;
    cout << "************************** INFO ****************************" << endl;
    cout << endl;
    cout << " Series/MP data type: " << typeid(tSeries[0]).name() << "(" << sizeof(tSeries[0]) << "B)" << endl;
    cout << " Index data type:     " << typeid(profileIndex[0]).name() << "(" << sizeof(profileIndex[0]) << "B)" << endl;
    cout << " Time series length:  " << tSeriesLength << endl;
    cout << " Window size:         " << windowSize << endl;
    cout << " Time series min:     " << tSeriesMin << endl;
    cout << " Time series max:     " << tSeriesMax << endl;
    cout << " Number of threads:   " << numThreads << endl;
    cout << " Exclusion zone:      " << exclusionZone << endl;
    cout << " Profile length:      " << tSeriesLength << endl;
    cout << "------------------------------------------------------------" << endl;
    cout << endl;

    /***************** Preprocess ******************/
    cout << "[>>] Preprocessing..." << endl;
    tstart = chrono::steady_clock::now();
    preprocess(tSeries, means, norms, df, dg, tSeriesLength);
    tend = chrono::steady_clock::now();
    telapsed = tend - tstart;
    cout << "[OK] Preprocessing Time:         " << setprecision(numeric_limits<double>::digits10 + 2) << telapsed.count() << " seconds." << endl;
    /***********************************************/

    /******************** SCAMP ********************/
    cout << "[>>] Executing SCAMP..." << endl;
    tstart = chrono::steady_clock::now();
    /*__m256d val_prueba;
    for (size_t i = 0; i < 64; i += 4)
    {
      val_prueba = _mm256_load_pd(&tSeries[i]);
    }*/
    // Here, loading the values is no issue.
    scamp(tSeries, means, norms, df, dg, profile, profileIndex);
    tend = chrono::steady_clock::now();
    telapsed = tend - tstart;
    cout << "[OK] SCAMP Time:              " << setprecision(numeric_limits<double>::digits10 + 2) << telapsed.count() << " seconds." << endl;
    /***********************************************/

    cout << "[>>] Saving result: " << outfilename << " ..." << endl;
    fstream statsFile(outfilename, ios_base::out);
    statsFile << "# Time (s)" << endl;
    statsFile << setprecision(9) << telapsed.count() << endl;
    statsFile << "# Profile Length" << endl;
    statsFile << profileLength << endl;
    statsFile << "# i,tseries,profile,index" << endl;
    for (ITYPE i = 0; i < profileLength; i++)
      statsFile << i << "," << tSeries[i] << "," << (DTYPE)sqrt(2 * windowSize * (1 - profile[i])) << "," << profileIndex[i] << endl;
    statsFile.close();

    cout << endl;

    //Libero memoria
    ALIGNED_ARRAY_DEL(tSeries);
    ALIGNED_ARRAY_DEL(norms);
    ALIGNED_ARRAY_DEL(means);
    ALIGNED_ARRAY_DEL(df);
    ALIGNED_ARRAY_DEL(dg);
    ALIGNED_ARRAY_DEL(profile);
    ALIGNED_ARRAY_DEL(profileIndex);
  }
  catch (exception &e)
  {
    cout << "Exception: " << e.what() << endl;
  }
}
